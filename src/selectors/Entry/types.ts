import {
  BaseRequestParameters,
  Entry,
  QueryableFields,
  QueryableRequestParameters,
  SerializedData,
  StarlightItemResponse,
  StarlightListResponse,
} from '../../types'

/**
 * Request parameters for listing entries.
 *
 * Used by {@apilink EntrySelector.list}.
 *
 * @group Request Parameters
 */
export interface ListEntriesParams
  extends BaseRequestParameters,
    QueryableRequestParameters {
  /**
   * A comma-separated list of categories. Only entries in these categories
   * will be returned. If undefined, all entries in the model will be listed.
   *
   * For instance, to show only entries in the "news" and "articles" categories,
   * pass `'news,category'`.
   */
  categories?: string
  /**
   * Define how items will be ordered. Check this field type to see the
   * allowed options.
   */
  order?:
    | 'title:asc'
    | 'title:desc'
    | 'published_at:asc'
    | 'published_at:desc'
    | 'views:asc'
    | 'views:desc'
  /**
   * When false, the returned entries won't have any data attached to them,
   * even if their Model have listable fields. Defaults to true.
   */
  data?: boolean
  /**
   * When given, return entries published before the given date. Should be an
   * ISO 8601 date string.
   *
   * Tip: in JavaScript, you can get an ISO 8601 date string by using
   * [Date.toISOString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString).
   */
  published_before?: string
  /**
   * When given, return entries published after the given date. Should be an
   * ISO 8601 date string.
   *
   * Tip: in JavaScript, you can get an ISO 8601 date string by using
   * [Date.toISOString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString).
   */
  published_after?: string
}

/**
 * Request parameters for getting an entry.
 *
 * Used by {@apilink EntrySelector.get}.
 *
 * @group Request Parameters
 */
export type GetEntryParams = {
  /**
   * Preview token generated by the Starlight admin interface. If defined and
   * valid, the API will return a preview of the entry revision associated
   * with the token.
   */
  preview?: string
}

/**
 * A Selector that provide methods to list and request information on
 * {@apilink Entry | Entries}.
 *
 * You can use an EntrySelector by accessing
 * {@apilink ModelInstance.entries}.
 *
 * @group Selectors
 */
export interface EntrySelector<D extends SerializedData> {
  /**
   * Returns a {@link StarlightItemResponse} with a single {@link Entry}.
   * Supports revision previewing by passing a `preview` parameter.
   *
   * @example Requesting information from an entry "hello-world" from a model of slug "posts".
   * ```ts
   * import Starlight from '@starlightcms/js-sdk'
   *
   * const response = await Starlight.posts.entries.get('hello-world')
   * ```
   *
   * @example Passing a preview token on the last example.
   * ```ts
   * import Starlight from '@starlightcms/js-sdk'
   *
   * const response = await Starlight.posts.entries.get('hello-world', {
   *   preview: 'CDfkvt1zTF5XhxWzi2Lejgo1'
   * })
   * ```
   *
   * @param slug The entry slug.
   * @param params An optional object of request parameters. See
   * {@link GetEntryParams} for all available options.
   * @param options An optional object of Fetch parameters. Use it to modify
   * the fetch request.See [MDN documentation on fetch()](https://developer.mozilla.org/en-US/docs/Web/API/fetch)
   * for all available options.
   */
  get(
    slug: string,
    params?: GetEntryParams,
    options?: RequestInit
  ): Promise<StarlightItemResponse<Entry<D>>>

  /**
   * Returns a {@link StarlightListResponse} with a list of
   * {@apilink Entry | Entries}.
   *
   * @example Requesting all entries from a model of slug "recipes".
   * ```ts
   * import Starlight from '@starlightcms/js-sdk'
   *
   * const response = await Starlight.recipes.entries.list()
   * ```
   *
   * @example Paginating and searching on the last example.
   * ```ts
   * import Starlight from '@starlightcms/js-sdk'
   *
   * const response = await Starlight.recipes.entries.list({
   *   page: 2,
   *   query: 'gravy',
   *   'field:is_vegan': true,
   * })
   * ```
   *
   * @example Ordering entries by number of views.
   * ```ts
   * import Starlight from '@starlightcms/js-sdk'
   *
   * const response = await Starlight.recipes.entries.list({
   *   order: 'views:desc'
   * })
   * ```
   *
   * @param options An optional object of request parameters. See
   * {@link ListEntriesParams} for all available options. `field:foo`
   * syntax is also supported, see {@link QueryableFields} for more info.
   */
  list(
    options?: ListEntriesParams & QueryableFields<D>
  ): Promise<StarlightListResponse<Entry<D>>>
}
